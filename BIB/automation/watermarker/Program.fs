open System
open ScryfallApi.Client.Models
open FSharp.Control.Tasks
open System.IO
open Svg
open System.Drawing.Imaging
open System.Drawing
open System.Threading.Tasks

let loadSetSymbolSvg (code: string) = task {
    do! Scryfall.downloadSetSymbolSvg code
    let! bytes = File.ReadAllBytesAsync (FileSystem.svgPath code)
    use stream = new MemoryStream(buffer = bytes)
    let svg = SvgDocument.Open stream
    return svg
}

let createWatermarkPng (card: Card) = task {
    let color = Rendering.getColor card

    let inner () = task {
        let! svg = loadSetSymbolSvg card.Set
        let mask = Rendering.toScaledBitmap svg
        use background = Rendering.loadBackground color
        use watermark = Rendering.maskImage background mask :> Image
        let path = FileSystem.watermarkPath card.Set color
        watermark.Save(path, ImageFormat.Png)
    }

    let path = FileSystem.watermarkPath card.Set color
    //if File.Exists path then
    //    printfn "Found PNG for %s - %s" card.Name path
    //    return ()
    //else 
    //    printfn "Rendering PNG for %s - %s..." card.Name path
    return! inner ()
}

let createCheatSheet (cards: Card seq) =
    let createRow (c: Card) =        
        let name = c.Name.PadRight(30)
        let set = c.Set.PadRight(5)
        let color = Rendering.getColor c |> FileSystem.serialize
        $"{name} | {set} | {color}"

    let rows = cards |> Seq.map createRow
    String.Join("\n", rows)

[<EntryPoint>]
let main argv = 
    task {
        let! _ = Scryfall.getAllSets()
        let! cardNames = MtgDesign.getCardNames "BIB"

        let cardNames = 
            cardNames 
            |> Seq.map (fun c -> 
                match c with
                | "Wordly Tutor" -> "Worldly Tutor" // TODO: Fix this!
                | x -> x
            )
            |> Seq.filter (fun c ->
                c <> "Starfish" // Token generated by Alliances card, but not printed
            )

        let! cards = 
            cardNames
            |> Seq.map Scryfall.getCard
            |> Task.WhenAll
            
        for c in cards do
            do! createWatermarkPng c

        Console.WriteLine()

        let cheatSheet = createCheatSheet cards
        Console.WriteLine cheatSheet

        Console.ReadLine() |> ignore
        return 0
    } 
    |> Async.AwaitTask 
    |> Async.RunSynchronously